{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { JOB_LOAD_FAIL, JOB_LOAD_REQUEST, JOB_LOAD_SINGLE_FAIL, JOB_LOAD_SINGLE_REQUEST, JOB_LOAD_SINGLE_SUCCESS, JOB_LOAD_SUCCESS, REGISTER_JOB_FAIL, REGISTER_JOB_REQUEST, REGISTER_JOB_SUCCESS } from \"../constants/jobconstant\";\nexport const jobLoadAction = (pageNumber, keyword = '', cat = '', location = '') => async dispatch => {\n  dispatch({\n    type: JOB_LOAD_REQUEST\n  });\n  try {\n    const {\n      data\n    } = await axios.get(`/api/jobs/show/?pageNumber=${pageNumber}&keyword=${keyword}&cat=${cat}&location=${location}`);\n    dispatch({\n      type: JOB_LOAD_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: JOB_LOAD_FAIL,\n      payload: error.response.data.error\n    });\n  }\n};\n\n// single job action\nexport const jobLoadSingleAction = id => async dispatch => {\n  dispatch({\n    type: JOB_LOAD_SINGLE_REQUEST\n  });\n  try {\n    const {\n      data\n    } = await axios.get(`/api/job/${id}`);\n    dispatch({\n      type: JOB_LOAD_SINGLE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: JOB_LOAD_SINGLE_FAIL,\n      payload: error.response.data.error\n    });\n  }\n};\n\n// register job action\nexport const registerAjobAction = job => async dispatch => {\n  dispatch({\n    type: REGISTER_JOB_REQUEST\n  });\n  try {\n    const {\n      data\n    } = await axios.post(\"/api/job/create\", job);\n    dispatch({\n      type: REGISTER_JOB_SUCCESS,\n      payload: data\n    });\n    toast.success(\"Job created successfully\");\n  } catch (error) {\n    dispatch({\n      type: REGISTER_JOB_FAIL,\n      payload: error.response.data.error\n    });\n    toast.error(error.response.data.error);\n  }\n};","map":{"version":3,"names":["axios","toast","JOB_LOAD_FAIL","JOB_LOAD_REQUEST","JOB_LOAD_SINGLE_FAIL","JOB_LOAD_SINGLE_REQUEST","JOB_LOAD_SINGLE_SUCCESS","JOB_LOAD_SUCCESS","REGISTER_JOB_FAIL","REGISTER_JOB_REQUEST","REGISTER_JOB_SUCCESS","jobLoadAction","pageNumber","keyword","cat","location","dispatch","type","data","get","payload","error","response","jobLoadSingleAction","id","registerAjobAction","job","post","success"],"sources":["C:/Users/Sumit/OneDrive/Desktop/job-portal-mern-stack-main/JOB_PORTAL/frontend/src/redux/actions/jobAction.js"],"sourcesContent":["import axios from 'axios';\nimport { toast } from 'react-toastify'\nimport {\n    JOB_LOAD_FAIL,\n    JOB_LOAD_REQUEST,\n    JOB_LOAD_SINGLE_FAIL,\n    JOB_LOAD_SINGLE_REQUEST,\n    JOB_LOAD_SINGLE_SUCCESS,\n    JOB_LOAD_SUCCESS,\n    REGISTER_JOB_FAIL,\n    REGISTER_JOB_REQUEST,\n    REGISTER_JOB_SUCCESS\n} from \"../constants/jobconstant\"\n\n\nexport const jobLoadAction = (pageNumber, keyword = '', cat = '', location = '') => async (dispatch) => {\n    dispatch({ type: JOB_LOAD_REQUEST });\n    try {\n        const { data } = await axios.get(`/api/jobs/show/?pageNumber=${pageNumber}&keyword=${keyword}&cat=${cat}&location=${location}`)\n        dispatch({\n            type: JOB_LOAD_SUCCESS,\n            payload: data\n        });\n    } catch (error) {\n        dispatch({\n            type: JOB_LOAD_FAIL,\n            payload: error.response.data.error\n        });\n    }\n}\n\n// single job action\nexport const jobLoadSingleAction = (id) => async (dispatch) => {\n    dispatch({ type: JOB_LOAD_SINGLE_REQUEST });\n    try {\n        const { data } = await axios.get(`/api/job/${id}`);\n        dispatch({\n            type: JOB_LOAD_SINGLE_SUCCESS,\n            payload: data\n        });\n    } catch (error) {\n        dispatch({\n            type: JOB_LOAD_SINGLE_FAIL,\n            payload: error.response.data.error\n        });\n    }\n}\n\n// register job action\nexport const registerAjobAction = (job) => async (dispatch) => {\n    dispatch({ type: REGISTER_JOB_REQUEST })\n\n    try {\n        const { data } = await axios.post(\"/api/job/create\", job)\n        dispatch({\n            type: REGISTER_JOB_SUCCESS,\n            payload: data\n        })\n        toast.success(\"Job created successfully\");\n\n\n    } catch (error) {\n        dispatch({\n            type: REGISTER_JOB_FAIL,\n            payload: error.response.data.error\n        })\n        toast.error(error.response.data.error);\n\n    }\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SACIC,aAAa,EACbC,gBAAgB,EAChBC,oBAAoB,EACpBC,uBAAuB,EACvBC,uBAAuB,EACvBC,gBAAgB,EAChBC,iBAAiB,EACjBC,oBAAoB,EACpBC,oBAAoB,QACjB,0BAA0B;AAGjC,OAAO,MAAMC,aAAa,GAAGA,CAACC,UAAU,EAAEC,OAAO,GAAG,EAAE,EAAEC,GAAG,GAAG,EAAE,EAAEC,QAAQ,GAAG,EAAE,KAAK,MAAOC,QAAQ,IAAK;EACpGA,QAAQ,CAAC;IAAEC,IAAI,EAAEd;EAAiB,CAAC,CAAC;EACpC,IAAI;IACA,MAAM;MAAEe;IAAK,CAAC,GAAG,MAAMlB,KAAK,CAACmB,GAAG,CAAE,8BAA6BP,UAAW,YAAWC,OAAQ,QAAOC,GAAI,aAAYC,QAAS,EAAC,CAAC;IAC/HC,QAAQ,CAAC;MACLC,IAAI,EAAEV,gBAAgB;MACtBa,OAAO,EAAEF;IACb,CAAC,CAAC;EACN,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZL,QAAQ,CAAC;MACLC,IAAI,EAAEf,aAAa;MACnBkB,OAAO,EAAEC,KAAK,CAACC,QAAQ,CAACJ,IAAI,CAACG;IACjC,CAAC,CAAC;EACN;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,mBAAmB,GAAIC,EAAE,IAAK,MAAOR,QAAQ,IAAK;EAC3DA,QAAQ,CAAC;IAAEC,IAAI,EAAEZ;EAAwB,CAAC,CAAC;EAC3C,IAAI;IACA,MAAM;MAAEa;IAAK,CAAC,GAAG,MAAMlB,KAAK,CAACmB,GAAG,CAAE,YAAWK,EAAG,EAAC,CAAC;IAClDR,QAAQ,CAAC;MACLC,IAAI,EAAEX,uBAAuB;MAC7Bc,OAAO,EAAEF;IACb,CAAC,CAAC;EACN,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZL,QAAQ,CAAC;MACLC,IAAI,EAAEb,oBAAoB;MAC1BgB,OAAO,EAAEC,KAAK,CAACC,QAAQ,CAACJ,IAAI,CAACG;IACjC,CAAC,CAAC;EACN;AACJ,CAAC;;AAED;AACA,OAAO,MAAMI,kBAAkB,GAAIC,GAAG,IAAK,MAAOV,QAAQ,IAAK;EAC3DA,QAAQ,CAAC;IAAEC,IAAI,EAAER;EAAqB,CAAC,CAAC;EAExC,IAAI;IACA,MAAM;MAAES;IAAK,CAAC,GAAG,MAAMlB,KAAK,CAAC2B,IAAI,CAAC,iBAAiB,EAAED,GAAG,CAAC;IACzDV,QAAQ,CAAC;MACLC,IAAI,EAAEP,oBAAoB;MAC1BU,OAAO,EAAEF;IACb,CAAC,CAAC;IACFjB,KAAK,CAAC2B,OAAO,CAAC,0BAA0B,CAAC;EAG7C,CAAC,CAAC,OAAOP,KAAK,EAAE;IACZL,QAAQ,CAAC;MACLC,IAAI,EAAET,iBAAiB;MACvBY,OAAO,EAAEC,KAAK,CAACC,QAAQ,CAACJ,IAAI,CAACG;IACjC,CAAC,CAAC;IACFpB,KAAK,CAACoB,KAAK,CAACA,KAAK,CAACC,QAAQ,CAACJ,IAAI,CAACG,KAAK,CAAC;EAE1C;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}